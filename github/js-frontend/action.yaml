name: Docker Build and Push
description: Build the JavaScript frontend
inputs:
  run_number:
    required: true
    description: The GitHub Actions Workflow run number
  aws_access_key:
    description: 'The aws access key'
    required: true
  aws_secret_access_key:
    description: 'The aws secret access key'
    required: true
  octopus_url:
    description: 'The octopus server'
    required: true
  octopus_apikey:
    description: 'The octopus apikey'
    required: true

runs:
  using: "composite"
  steps:
    # These are the dependencies that need to be manually installed to support https://github.com/ehsaniara/maven-repository-aws-s3
    - name: Install maven-repository-aws-s3 dependencies
      run: |
        HOME=$(dirname $(readlink -f $(which mvn)))
        for dep in "com.github.ehsaniara:maven-repository-aws-s3:1.2.11:jar" "org.apache.httpcomponents:httpcore:4.4.16:jar" "com.amazonaws:aws-java-sdk-s3:1.12.405:jar" "com.amazonaws:aws-java-sdk-core:1.12.405:jar" "com.fasterxml.jackson.core:jackson-core:2.14.2:jar" "com.fasterxml.jackson.core:jackson-databind:2.14.2:jar" "com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar" "joda-time:joda-time:2.12.2:jar" "org.apache.httpcomponents:httpclient:4.5.14:jar" "commons-io:commons-io:2.12.0"
        do
           split=(${dep//:/ })
           mvn dependency:get \
            --batch-mode \
            -DrepoUrl=https://repo.maven.apache.org/maven2 \
            -Dartifact=${dep} \
            -Ddest=${HOME}/../lib/${split[0]}.${split[1]}.jar
        done
      shell: bash
      working-directory: java

    - name: Configure maven-repository-aws-s3
      run: |
        cat <<EOT > ~/.m2/settings.xml
        <settings>
          <servers>
            <server>
              <id>octopus-sales-public-snapshot</id>
              <username>${{ inputs.aws_access_key }}</username>
              <password>${{ inputs.aws_secret_access_key }}</password>
              <configuration>
                <region>ap-southeast-2</region>
                <publicRepository>true</publicRepository>
              </configuration>
            </server>
            <server>
              <id>octopus-sales-public-release</id>
              <username>${{ inputs.aws_access_key }}</username>
              <password>${{ inputs.aws_secret_access_key }}</password>
              <configuration>
                <region>ap-southeast-2</region>
                <publicRepository>true</publicRepository>
              </configuration>
            </server>
          </servers>
        </settings>
        EOT
      shell: bash
      working-directory: java

    - name: Clone code repo
      uses: actions/checkout@v2

    - uses: actions/setup-node@v3
      with:
        node-version: 14
        cache: 'npm'
        cache-dependency-path: js/frontend/yarn.lock

    - name: Install Octopus CLI 🐙
      uses: OctopusDeploy/install-octopus-cli-action@v3
      with:
        version: 'latest'

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v7

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x

    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        additionalArguments: /overrideconfig mode=Mainline

    - name: Install modules
      run: yarn install
      shell: bash
      working-directory: js/frontend

    - name: Instance CycloneDX
      run: npm install --global @cyclonedx/cyclonedx-npm
      shell: bash

    # This step generates a Source Bill of Materials (SBOM) package that captures all the dependencies compiled
    # into the application.
    - name: Generate SBOM
      run: cyclonedx-npm --ignore-npm-errors --output-file bom.xml
      shell: bash
      working-directory: js/frontend

    # We capture the SBOM, which is found in the file bom.xml, as a versioned ZIP package.
    - name: Build SBOM package
      env:
        OCTOPUS_URL: ${{ inputs.octopus_url }}
        OCTOPUS_API_KEY: ${{ inputs.octopus_apikey }}
      run: >
        octopus package zip create
        --id javascript-frontend-sbom
        --version ${{ steps.determine_version.outputs.semVer }}
        --include **/bom.xml
      shell: bash
      working-directory: js/frontend

    # The SBOM package is pushed to the sales maven feed
    - name: Push SBOM Package
      run: |       
        mvn deploy:deploy-file \
          "-DgroupId=com.octopus" \
          "-DartifactId=javascript-frontend-sbom" \
          "-Dversion=${{ steps.determine_version.outputs.semVer }}" \
          "-Dpackaging=zip" \
          "-Dfile=js/frontend/javascript-frontend-sbom.${{ steps.determine_version.outputs.semVer }}.zip" \
          "-DrepositoryId=octopus-sales-public-snapshot" \
          "-Durl=s3://octopus-sales-public-maven-repo/snapshot"
      shell: bash

    - name: Build App
      run: yarn run build
      shell: bash
      working-directory: js/frontend

    - name: Build and deploy serverless package
      run: |
        pushd js/frontend
        zip -r octopub-frontend.${{ steps.determine_version.outputs.semVer }}.zip serverless.yaml build public/config.json.dot
        popd
        mvn deploy:deploy-file \
          "-DgroupId=com.octopus" \
          "-DartifactId=octopub-frontend-serverless" \
          "-Dversion=${{ steps.determine_version.outputs.semVer }}" \
          "-Dpackaging=zip" \
          "-Dfile=js/frontend/octopub-frontend.${{ steps.determine_version.outputs.semVer }}.zip" \
          "-DrepositoryId=octopus-sales-public-snapshot" \
          "-Durl=s3://octopus-sales-public-maven-repo/snapshot"
      shell: bash

    - name: Build image
      uses: mamezou-tech/buildpacks-action@master
      if: inputs.image_tag != ''
      with:
        image: '${{ inputs.image_tag }}'
        tag: '${{ steps.determine_version.outputs.semVer }}'
        path: 'js/frontend'
        builder: 'heroku/buildpacks:20'
        buildpacks: 'heroku/nodejs https://cnb-shim.herokuapp.com/v1/heroku-community/static'
        env: NODE_OPTIONS=--openssl-legacy-provider

    # The Docker image is built and pushed. It uses the same tag as the SBOM package version to allow us to match the
    # two packages in Octopus.
    - name: Push image to Dockerhub
      run: docker push octopussamples/octopub-frontend:${{ steps.determine_version.outputs.semVer }}
      shell: bash
      working-directory: js/frontend

    - name: Build and push static web package
      run: |
        pushd js/frontend/build
        zip -r ../octopub-frontend.${{ steps.determine_version.outputs.semVer }}.zip .
        popd
        
        mvn deploy:deploy-file \
        "-DgroupId=com.octopus" \
        "-DartifactId=octopub-frontend" \
        "-Dversion=${{ steps.determine_version.outputs.semVer }}" \
        "-Dpackaging=zip" \
        "-Dfile=js/frontend/octopub-frontend.${{ steps.determine_version.outputs.semVer }}.zip" \
        "-DrepositoryId=octopus-sales-public-snapshot" \
        "-Durl=s3://octopus-sales-public-maven-repo/snapshot"
      shell: bash

    # The Docker image used to run Cypress tests is built and pushed.
    - name: Build, tag, and push cypress image to DockerHub
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: |
        cd cypress
        docker build -t octopussamples/cypress-worker-image .
        docker push octopussamples/cypress-worker-image
      shell: bash
      working-directory: js

    - name: Install Cypress modules
      run: npm install
      shell: bash
      working-directory: js/cypress-frontend

    # End-to-end tests are performed with Cypress.
    - name: Build Cypress package
      env:
        OCTOPUS_URL: ${{ inputs.octopus_url }}
        OCTOPUS_API_KEY: ${{ inputs.octopus_apikey }}
      run: >
        octopus package zip create
        --id octopub-frontend-cypress
        --version ${{ steps.determine_version.outputs.semVer }}
        --out-folder ..
      shell: bash
      working-directory: js/cypress-frontend

    # The Cypress package is pushed to the sales maven feed.
    - name: Push Cypress Package
      run: |
        mvn deploy:deploy-file \
        "-DgroupId=com.octopus" \
        "-DartifactId=octopub-frontend-cypress" \
        "-Dversion=${{ steps.determine_version.outputs.semVer }}" \
        "-Dpackaging=zip" \
        "-Dfile=js/octopub-frontend-cypress.${{ steps.determine_version.outputs.semVer }}.zip" \
        "-DrepositoryId=octopus-sales-public-snapshot" \
        "-Durl=s3://octopus-sales-public-maven-repo/snapshot"
      shell: bash