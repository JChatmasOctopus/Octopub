name: Docker Build and Push
description: Build the Java microservice
inputs:
  run_number:
    required: true
    description: The GitHub Actions Workflow run number
  github_repo:
    description: 'The github repo'
    required: true
  github_token:
    description: 'The github token'
    required: true
  dockerhub_username:
    description: 'The dockerhub username'
    required: true
  dockerhub_password:
    description: 'The dockerhub password'
    required: true
  octopus_url:
    description: 'The octopus server'
    required: true
  octopus_apikey:
    description: 'The octopus apikey'
    required: true
  aws_access_key:
    description: 'The aws access key'
    required: true
  aws_secret_access_key:
    description: 'The aws secret access key'
    required: true
  service_directory:
    description: 'The directory holding the microservice'
    required: true

runs:
  using: "composite"
  steps:
    - name: Clone code repo
      uses: actions/checkout@v2

    - name: Install Octopus CLI üêô
      uses: OctopusDeploy/install-octopus-cli-action@v3
      with:
        version: 'latest'

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v7

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x

    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        additionalArguments: /overrideconfig mode=Mainline

    - name: Set up JDK 1.17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: adopt
        cache: 'maven'

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    # These are the dependencies that need to be manually installed to support https://github.com/ehsaniara/maven-repository-aws-s3
    - name: Install maven-repository-aws-s3 dependencies
      run: |
        HOME=$(dirname $(readlink -f $(which mvn)))
        for dep in "com.github.ehsaniara:maven-repository-aws-s3:1.2.11:jar" "org.apache.httpcomponents:httpcore:4.4.16:jar" "com.amazonaws:aws-java-sdk-s3:1.12.405:jar" "com.amazonaws:aws-java-sdk-core:1.12.405:jar" "com.fasterxml.jackson.core:jackson-core:2.14.2:jar" "com.fasterxml.jackson.core:jackson-databind:2.14.2:jar" "com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar" "joda-time:joda-time:2.12.2:jar" "org.apache.httpcomponents:httpclient:4.5.14:jar" "commons-io:commons-io:2.12.0"
        do
           split=(${dep//:/ })
           mvn dependency:get \
            --batch-mode \
            -DrepoUrl=https://repo.maven.apache.org/maven2 \
            -Dartifact=${dep} \
            -Ddest=${HOME}/../lib/${split[0]}.${split[1]}.jar
        done
      shell: bash
      working-directory: java

    - name: Configure maven-repository-aws-s3
      run: |
        cat <<EOT > ~/.m2/settings.xml
        <settings>
          <servers>
            <server>
              <id>octopus-sales-public-snapshot</id>
              <username>${{ inputs.aws_access_key }}</username>
              <password>${{ inputs.aws_secret_access_key }}</password>
              <configuration>
                <region>ap-southeast-2</region>
                <publicRepository>true</publicRepository>
              </configuration>
            </server>
            <server>
              <id>octopus-sales-public-release</id>
              <username>${{ inputs.aws_access_key }}</username>
              <password>${{ inputs.aws_secret_access_key }}</password>
              <configuration>
                <region>ap-southeast-2</region>
                <publicRepository>true</publicRepository>
              </configuration>
            </server>
          </servers>
        </settings>
        EOT
      shell: bash
      working-directory: java

    - uses: DeLaGuardo/setup-graalvm@4.0
      with:
        graalvm: '22.3.2'
        java: 'java17'
        arch: 'amd64'

    - name: Install native-image component
      run: gu install native-image
      shell: bash

    - name: Checkstyle
      run: ./mvnw --batch-mode checkstyle:check
      shell: bash
      working-directory: java

    - name: Install modules
      run: ./mvnw --batch-mode install -DskipTests
      shell: bash
      working-directory: java

    - name: Test Backend
      run: ./mvnw --batch-mode test
      shell: bash
      working-directory: java/${{ inputs.service_directory }}

    - name: Test Shared Library
      run: ./mvnw --batch-mode test
      shell: bash
      working-directory: java/microservice-utils

    - name: Build with Maven
      run: ./mvnw --batch-mode package --file pom.xml -DskipTests
      shell: bash
      working-directory: java/${{ inputs.service_directory }}

    - name: Generate JaCoCo Badges
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
        jacoco-csv-file: java/${{ inputs.service_directory }}/target/jacoco-report/jacoco.csv
        coverage-badge-filename: ${{ inputs.service_directory }}.svg
        branches-badge-filename: ${{ inputs.service_directory }}-branches.svg

    - name: Generate JaCoCo Badges for Shared Library
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
        jacoco-csv-file: java/microservice-utils/target/site/jacoco/jacoco.csv
        coverage-badge-filename: microservice-utils.svg
        branches-badge-filename: microservice-utils-branches.svg

    - name: Update resources
      if: ${{ steps.branch-name.outputs.current_branch == 'main' }}
      uses: test-room-7/action-update-file@v1.6.0
      with:
        file-path: |
          .github/badges/microservice-utils.svg
          .github/badges/microservice-utils-branches.svg
        commit-msg: Update badges
        github-token: ${{ inputs.github_token }}

    # This step generates a Source Bill of Materials (SBOM) package that captures all the dependencies compiled
    # into the application.
    - name: Generate SBOM
      run: ./mvnw cyclonedx:makeAggregateBom -DskipTests --no-transfer-progress --batch-mode
      shell: bash
      working-directory: java

    # We capture the SBOM, which is found in the file bom.xml, as a versioned ZIP package.
    - name: Build SBOM package
      env:
        OCTOPUS_URL: ${{ inputs.octopus_url }}
        OCTOPUS_API_KEY: ${{ inputs.octopus_apikey }}
      run: >
        octopus package zip create
        --id ${{ inputs.service_directory }}-sbom
        --version ${{ steps.determine_version.outputs.semVer }}
        --include **/bom.xml
      shell: bash
      working-directory: java/${{ inputs.service_directory }}

    # The SBOM package is pushed to the Octopus built-in feed.
    - name: Push SBOM Package
      env:
        AWS_DEFAULT_REGION: ap-southeast-2
      run: |
        mvn deploy:deploy-file \
          "-DgroupId=com.octopus" \
          "-DartifactId=${{ inputs.service_directory }}-sbom" \
          "-Dversion=${{ steps.determine_version.outputs.semVer }}" \
          "-Dpackaging=zip" \
          "-Dfile=java/${{ inputs.service_directory }}/${{ inputs.service_directory }}-sbom.${{ steps.determine_version.outputs.semVer }}.zip" \
          "-DrepositoryId=octopus-sales-public-snapshot" \
          "-Durl=s3://octopus-sales-public-maven-repo/snapshot"
      shell: bash

    # Integration tests are performed with Postman using an exported collection.
    - name: Build Postman package
      env:
        OCTOPUS_URL: ${{ inputs.octopus_url }}
        OCTOPUS_API_KEY: ${{ inputs.octopus_apikey }}
      run: |
        if [[ -f "${{ inputs.service_directory }}-postman" ]]
        then
          octopus package zip create \
          --id ${{ inputs.service_directory }}-postman \
          --version ${{ steps.determine_version.outputs.semVer }} \
          --include test.json \
          --base-path ${{ inputs.service_directory }}-postman
        fi
      shell: bash
      working-directory: java

    # The Postman package is pushed to the Octopus built-in feed.
    - name: Push Postman Package
      env:
        AWS_DEFAULT_REGION: ap-southeast-2
      run: |
        mvn deploy:deploy-file \
          "-DgroupId=com.octopus" \
          "-DartifactId=${{ inputs.service_directory }}-postman" \
          "-Dversion=${{ steps.determine_version.outputs.semVer }}" \
          "-Dpackaging=zip" \
          "-Dfile=java/${{ inputs.service_directory }}-postman.${{ steps.determine_version.outputs.semVer }}.zip" \
          "-DrepositoryId=octopus-sales-public-snapshot" \
          "-Durl=s3://octopus-sales-public-maven-repo/snapshot"
      shell: bash

    # The Docker image is built and pushed. It uses the same tag as the SBOM package version to allow us to match the
    # two packages in Octopus.
    - name: Build, tag, and push image to Dockerhub
      run: |
        docker build -f src/main/docker/Dockerfile.legacy-jar -t octopussamples/octopub-${{ inputs.service_directory }}:${{ steps.determine_version.outputs.semVer }} .
        docker push octopussamples/octopub-${{ inputs.service_directory }}:${{ steps.determine_version.outputs.semVer }}
      shell: bash
      working-directory: java/${{ inputs.service_directory }}

    - name: Build and deploy serverless package
      run: |
        # Need to compile in docker image to fix https://github.com/quarkusio/quarkus/issues/25897
        ./mvnw \
          --batch-mode package \
          -P "lambda,native" \
          -DskipTests \
          -Dquarkus.profile=faas \
          -Dquarkus.native.container-build=true \
          -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:22.3-java17
        zip ${{ inputs.service_directory }}.${{ steps.determine_version.outputs.semVer }}.zip serverless.yaml target/function.zip
      shell: bash
      working-directory: java/${{ inputs.service_directory }}

    - name: Deploy serverless package
      env:
        AWS_DEFAULT_REGION: ap-southeast-2
      run: |
        mvn deploy:deploy-file \
          "-DgroupId=com.octopus" \
          "-DartifactId=${{ inputs.service_directory }}-lambda" \
          "-Dversion=${{ steps.determine_version.outputs.semVer }}" \
          "-Dpackaging=zip" \
          "-Dfile=java/${{ inputs.service_directory }}/${{ inputs.service_directory }}.${{ steps.determine_version.outputs.semVer }}.zip" \
          "-DrepositoryId=octopus-sales-public-snapshot" \
          "-Durl=s3://octopus-sales-public-maven-repo/snapshot"
      shell: bash